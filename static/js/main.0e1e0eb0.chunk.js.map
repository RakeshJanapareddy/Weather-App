{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["WeatherApp","_useState","useState","_useState2","_slicedToArray","city","setCity","_useState3","_useState4","weatherData","setWeatherData","_useState5","_useState6","showWeatherCard","setShowWeatherCard","React","createElement","Box","m","style","backgroundImage","backgroundSize","minHeight","display","alignItems","justifyContent","Typography","variant","gutterBottom","color","textAlign","TextField","label","value","onChange","e","target","Button","onClick","apiUrl","concat","fetch","then","response","json","data","catch","error","console","marginTop","Card","width","height","CardContent","name","weather","length","description","main","Fragment","temp","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"8PAkGeA,EA/FI,WAAM,IAAAC,EACCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAAAI,EACkBL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAA7CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAAAG,EACYT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GA4B1C,OACEG,IAAAC,cAACC,IAAG,CACFC,EAAG,EACHC,MAAO,CACLC,gBARJ,yHASIC,eAAgB,QAChBC,UAAW,QACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAGlBV,IAAAC,cAACC,IAAG,KACFF,IAAAC,cAACU,IAAU,CAACC,QAAQ,KAAKC,cAAY,EAACT,MAAO,CAAEU,MAAO,QAASC,UAAW,WAAY,mBAGtFf,IAAAC,cAAA,KAAGG,MAAO,CAAEU,MAAO,QAASC,UAAW,WAAY,8BACnDf,IAAAC,cAACe,IAAS,CACRC,MAAM,kBACNC,MAAO5B,EACP6B,SA9CiB,SAACC,GACxB7B,EAAQ6B,EAAEC,OAAOH,QA8CXN,QAAQ,aAEVZ,IAAAC,cAACqB,IAAM,CAACV,QAAQ,YAAYE,MAAM,UAAUS,QA7C3B,WACrB,IACMC,EAAM,qDAAAC,OAAwDnC,EAAI,WAAAmC,OADzD,mCACyE,iBAExFC,MAAMF,GACHG,KAAK,SAACC,GAAQ,OAAKA,EAASC,SAC5BF,KAAK,SAACG,GACLnC,EAAemC,GACf/B,GAAmB,KAEpBgC,MAAM,SAACC,GACNC,QAAQD,MAAM,+BAAgCA,GAC9CrC,EAAe,MACfI,GAAmB,MAgCkDK,MAAO,CAAE8B,UAAW,SAAU,gBAIpGpC,GAAmBJ,GAClBM,IAAAC,cAACkC,IAAI,CACHvB,QAAQ,WACRR,MAAO,CACLC,gBAjCR,yHAkCQ+B,MAAO,IACPC,OAAQ,MAGVrC,IAAAC,cAACqC,IAAW,KACVtC,IAAAC,cAAA,KAAGG,MAAO,CAAEU,MAAO,QAASC,UAAW,WAAY,UACnDf,IAAAC,cAACU,IAAU,CAACC,QAAQ,MAClBZ,IAAAC,cAAA,YAAM,8BACLP,EAAY6C,MAEd7C,EAAY8C,SAAW9C,EAAY8C,QAAQC,OAAS,GACnDzC,IAAAC,cAACU,IAAU,CAACC,QAAQ,SAClBZ,IAAAC,cAAA,YAAM,aACLP,EAAY8C,QAAQ,GAAGE,aAG3BhD,EAAYiD,MACX3C,IAAAC,cAAAD,IAAA4C,SAAA,KACE5C,IAAAC,cAACU,IAAU,CAACC,QAAQ,SAAO,gBAAAa,OAAkB/B,EAAYiD,KAAKE,KAAI,UAClE7C,IAAAC,cAACU,IAAU,CAACC,QAAQ,SAAO,aAAAa,OAAe/B,EAAYiD,KAAKG,SAAQ,OAGtEpD,EAAYqD,MACX/C,IAAAC,cAACU,IAAU,CAACC,QAAQ,SAAO,eAAAa,OAAiB/B,EAAYqD,KAAKC,MAAK,aC7EjEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAhC,EAAA,GAAAO,KAAAyB,EAAAC,KAAA,UAAqB1B,KAAK,SAAA2B,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhE,IAAAC,cAACD,IAAMiE,WAAU,KACfjE,IAAAC,cAACiE,EAAG,QAORjB","file":"static/js/main.0e1e0eb0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button, Typography, Box, Card, CardContent } from '@material-ui/core';\r\n\r\nconst WeatherApp = () => {\r\n  const [city, setCity] = useState('');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [showWeatherCard, setShowWeatherCard] = useState(false);\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const getWeatherData = () => {\r\n    const apiKey = '0eb75fbb260fe905c23785f0c50f02ba';\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\r\n\r\n    fetch(apiUrl)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setWeatherData(data);\r\n        setShowWeatherCard(true);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching weather data:', error);\r\n        setWeatherData(null);\r\n        setShowWeatherCard(false);\r\n      });\r\n  };\r\n\r\n  const backgroundImageUrl =\r\n    'url(\"https://images.pexels.com/photos/2114014/pexels-photo-2114014.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")';\r\n  const cardBackGroundImgUrl =\r\n    'url(\"https://images.pexels.com/photos/2909083/pexels-photo-2909083.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\")';\r\n\r\n  return (\r\n    <Box\r\n      m={2}\r\n      style={{\r\n        backgroundImage: backgroundImageUrl,\r\n        backgroundSize: 'cover',\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-around',\r\n      }}\r\n    >\r\n      <Box>\r\n        <Typography variant=\"h4\" gutterBottom style={{ color: 'white', textAlign: 'center' }}>\r\n          Weather by city\r\n        </Typography>\r\n        <p style={{ color: 'white', textAlign: 'center' }}>please enter the city name</p>\r\n        <TextField\r\n          label=\"Enter City Name\"\r\n          value={city}\r\n          onChange={handleCityChange}\r\n          variant=\"outlined\"\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={getWeatherData} style={{ marginTop: '11px' }}>\r\n          Get Weather\r\n        </Button>\r\n      </Box>\r\n      {showWeatherCard && weatherData && (\r\n        <Card\r\n          variant=\"outlined\"\r\n          style={{\r\n            backgroundImage: cardBackGroundImgUrl,\r\n            width: 500,\r\n            height: 400,\r\n          }}\r\n        >\r\n          <CardContent>\r\n            <p style={{ color: 'white', textAlign: 'center' }}>Clouds</p>\r\n            <Typography variant=\"h6\">\r\n              <span>Weather Details for city: </span>\r\n              {weatherData.name}\r\n            </Typography>\r\n            {weatherData.weather && weatherData.weather.length > 0 && (\r\n              <Typography variant=\"body1\">\r\n                <span>Summary: </span>\r\n                {weatherData.weather[0].description}\r\n              </Typography>\r\n            )}\r\n            {weatherData.main && (\r\n              <>\r\n                <Typography variant=\"body1\">{`Temperature: ${weatherData.main.temp}Â°C`}</Typography>\r\n                <Typography variant=\"body1\">{`Humidity: ${weatherData.main.humidity}%`}</Typography>\r\n              </>\r\n            )}\r\n            {weatherData.wind && (\r\n              <Typography variant=\"body1\">{`Wind Speed: ${weatherData.wind.speed} m/s`}</Typography>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}